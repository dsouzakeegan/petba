import { Component, OnInit, ViewChild } from '@angular/core';
import { IonicModule, IonContent } from '@ionic/angular';
import { FormsModule } from '@angular/forms';
import { CommonModule } from '@angular/common';
import { ActivatedRoute } from '@angular/router';
import { io } from 'socket.io-client';
import { HttpClient } from '@angular/common/http';
import { firstValueFrom } from 'rxjs';

interface ChatMessage {
  message: string;
  sender_id: string;
  receiver_id: string;
  from_id: string;
  status: string;
  date_time: string;
}

interface ChatResponse {
  chatData: ChatMessage[];
}

interface ChatDetails {
  adoption_id: string;
  sender_id: string;
  receiver_id: string;
  adoption_image: string;
  petname: string;
  receiver_name: string;
  sender_name: string;
}

@Component({
  selector: 'app-chat',
  templateUrl: './chat.page.html',
  styleUrls: ['./chat.page.scss'],
  standalone: true,
  imports: [IonicModule, FormsModule, CommonModule]
})
export class ChatPage implements OnInit {
  @ViewChild(IonContent, { static: false }) content!: IonContent;
  
  socket: any;
  serverUrl: string = 'http://localhost:5000';
  customer1: string = '';
  customer2: string = '';
  adoptionId: string = '';
  room: string = '';
  message: string = '';
  messages: string[] = [];
  chatHistory: ChatMessage[] = [];
  apiUrl: string = 'https://petba.in/Api/api/index.php/loadChat';
  customer_id: string = '';
  adoptionImage: string = '';
  petName: string = '';
  chatName: string = '';
  isLoading: boolean = false;

  constructor(
    private route: ActivatedRoute,
    private http: HttpClient
  ) {}

  ngOnInit() {
    const userData = JSON.parse(localStorage.getItem('userData') || '{}');
    this.customer_id = userData.userData?.customer_id || '';

    this.socket = io(this.serverUrl);
    this.socket.on('chat message', (msg: string) => {
      this.messages.push(msg);
      console.log('Socket message received');
      
      // Refresh chat history when receiving a socket message
      this.loadChatHistory();
    });

    this.route.paramMap.subscribe(params => {
      this.customer1 = this.customer_id;
      if(this.customer_id == params.get('receiver_id')){
        this.customer2 = params.get('sender_id') || '';
      } else {
        this.customer2 = params.get('receiver_id') || '';
      }
      
      this.adoptionId = params.get('adoption_id') || '';
      this.joinRoom();
      
      // Load chat details and history
      Promise.all([
        this.loadChatDetailsAsync(),
        this.loadChatHistoryAsync()
      ]).then(() => {
        this.scrollToBottom();
      });
    });
    console.log('Current customer_id from localStorage:', this.customer_id);
  }

  ngAfterViewInit() {
    // Small delay to ensure the view is fully rendered
    setTimeout(() => {
      this.scrollToBottom();
    }, 300);
  }

  async loadChatHistoryAsync(): Promise<void> {
    if (!this.customer1 || !this.customer2 || !this.adoptionId) return;
    
    this.isLoading = true;
    
    const payload = {
      sender_id: parseInt(this.customer1),
      receiver_id: parseInt(this.customer2),
      adoption_id: parseInt(this.adoptionId)
    };
    
    try {
      const response = await firstValueFrom(this.http.post<ChatResponse>(this.apiUrl, payload));
      this.chatHistory = response.chatData;
      console.log('Chat history loaded:', this.chatHistory);
    } catch (error) {
      console.error('Error loading chat history:', error);
    } finally {
      this.isLoading = false;
      // Scroll to bottom after content loads
      setTimeout(() => this.scrollToBottom(), 50);
    }
  }

  // Keep the old method for socket compatibility
  loadChatHistory() {
    this.loadChatHistoryAsync().then(() => {
      this.scrollToBottom();
    });
  }

  async loadChatDetailsAsync(): Promise<void> {
    const apiUrl = 'https://petba.in/Api/api/index.php/chatlist';
    const payload = {
      c_id: this.customer_id
    };

    try {
      const response = await firstValueFrom(this.http.post<any>(apiUrl, payload));
      if (response && response.chatlist) {
        const chatDetails: ChatDetails | undefined = response.chatlist.find((chat: ChatDetails) => 
          chat.adoption_id === this.adoptionId && 
          (chat.sender_id === this.customer1 || chat.receiver_id === this.customer1)
        );

        if (chatDetails) {
          this.adoptionImage = chatDetails.adoption_image;
          this.petName = chatDetails.petname;
          this.chatName = chatDetails.receiver_name === this.customer_id ? 
                         chatDetails.sender_name : chatDetails.receiver_name;

          console.log('Chat details loaded:', {
            image: this.adoptionImage,
            pet: this.petName,
            name: this.chatName
          });
        } else {
          console.error('Chat details not found for the given adoption ID and customer ID');
        }
      }
    } catch (error) {
      console.error('Error loading chat details:', error);
    }
  }

  joinRoom() {
    if (this.customer1 && this.customer2 && this.adoptionId) {
      console.log('Room joined');
      this.socket.emit('join room', {
        customer1: this.customer1,
        customer2: this.customer2,
        adoptionId: this.adoptionId
      });
      console.log('Room joined:', this.customer1, this.customer2, this.adoptionId);
    }
  }

  sendMessage() {
    if (this.message.trim() && this.customer1 && this.customer2 && this.adoptionId) {
      this.socket.emit('chat message', {
        customer1: this.customer1,
        customer2: this.customer2,
        adoptionId: this.adoptionId,
        message: this.message
      });
      this.message = '';
      
      // Load new messages and scroll down
      // setTimeout(() => {
      //   this.loadChatHistory();
      // }, 100);
    }
  }

  scrollToBottom() {
    if (this.content) {
      this.content.scrollToBottom(300);
    }
  }
}